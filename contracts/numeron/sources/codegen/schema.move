  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module numeron::schema {

  use std::ascii::String;

  use std::ascii::string;

  use sui::package::UpgradeCap;

  use std::type_name;

  use dubhe::storage;

  use dubhe::storage_value::{Self, StorageValue};

  use dubhe::storage_map::{Self, StorageMap};

  use dubhe::storage_double_map::{Self, StorageDoubleMap};

  use sui::dynamic_field as df;

  use numeron::creature_type::CreatureType;

  use numeron::rarity::Rarity;

  use numeron::terrain_type::TerrainType;

  use numeron::battle_result::BattleResult;

  use numeron::weather_type::WeatherType;

  use numeron::region_type::RegionType;

  use numeron::connection_type::ConnectionType;

  use numeron::position::Position;

  use numeron::creature_stats::CreatureStats;

  use numeron::map_config::MapConfig;

  use numeron::extension_data::ExtensionData;

  use numeron::connection_point::ConnectionPoint;

  use numeron::requirement::Requirement;

  use numeron::region_metadata::RegionMetadata;

  use numeron::map_created::MapCreated;

  use numeron::map_updated::MapUpdated;

  use numeron::map_connected::MapConnected;

  public struct Schema has key, store {
    id: UID,
  }

  public fun borrow_map_metadata(self: &Schema): &StorageMap<address, RegionMetadata> {
    storage::borrow_field(&self.id, b"map_metadata")
  }

  public(package) fun map_metadata(self: &mut Schema): &mut StorageMap<address, RegionMetadata> {
    storage::borrow_mut_field(&mut self.id, b"map_metadata")
  }

  public fun borrow_map_connections(self: &Schema): &StorageMap<address, vector<ConnectionPoint>> {
    storage::borrow_field(&self.id, b"map_connections")
  }

  public(package) fun map_connections(self: &mut Schema): &mut StorageMap<address, vector<ConnectionPoint>> {
    storage::borrow_mut_field(&mut self.id, b"map_connections")
  }

  public(package) fun create(ctx: &mut TxContext): Schema {
    let mut id = object::new(ctx);
    storage::add_field<StorageMap<address, RegionMetadata>>(&mut id, b"map_metadata", storage_map::new(b"map_metadata", ctx));
    storage::add_field<StorageMap<address, vector<ConnectionPoint>>>(&mut id, b"map_connections", storage_map::new(b"map_connections", ctx));
    Schema { id }
  }

  public fun migrate(_schema: &mut Schema, _cap: &UpgradeCap, _ctx: &mut TxContext) {}

  // ======================================== View Functions ========================================

  public fun get_map_metadata(self: &Schema, key: address): &RegionMetadata {
    self.borrow_map_metadata().get(key)
  }

  public fun get_map_connections(self: &Schema, key: address): &vector<ConnectionPoint> {
    self.borrow_map_connections().get(key)
  }

  // =========================================================================================================
}
