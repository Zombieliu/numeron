  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module numeron::map_connected {

  use std::ascii::String;

  use numeron::creature_type::CreatureType;

  use numeron::rarity::Rarity;

  use numeron::terrain_type::TerrainType;

  use numeron::battle_result::BattleResult;

  use numeron::weather_type::WeatherType;

  use numeron::region_type::RegionType;

  use numeron::connection_type::ConnectionType;

  public struct MapConnected has copy, drop, store {
    map_a: address,
    map_b: address,
    connection_point: ConnectionPoint,
  }

  public fun new(map_a: address, map_b: address, connection_point: ConnectionPoint): MapConnected {
    MapConnected {
                                   map_a,map_b,connection_point
                               }
  }

  public fun get(self: &MapConnected): (address,address,ConnectionPoint) {
    (self.map_a,self.map_b,self.connection_point)
  }

  public fun get_map_a(self: &MapConnected): address {
    self.map_a
  }

  public fun get_map_b(self: &MapConnected): address {
    self.map_b
  }

  public fun get_connection_point(self: &MapConnected): ConnectionPoint {
    self.connection_point
  }

  public(package) fun set_map_a(self: &mut MapConnected, map_a: address) {
    self.map_a = map_a;
  }

  public(package) fun set_map_b(self: &mut MapConnected, map_b: address) {
    self.map_b = map_b;
  }

  public(package) fun set_connection_point(self: &mut MapConnected, connection_point: ConnectionPoint) {
    self.connection_point = connection_point;
  }

  public(package) fun set(self: &mut MapConnected, map_a: address, map_b: address, connection_point: ConnectionPoint) {
    self.map_a = map_a;
    self.map_b = map_b;
    self.connection_point = connection_point;
  }
}
