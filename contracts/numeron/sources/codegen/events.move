  // Copyright (c) Obelisk Labs, Inc.
  // SPDX-License-Identifier: Apache-2.0
  #[allow(unused_use)]
  
  /* Autogenerated file. Do not edit manually. */
  
  module numeron::events {

  use std::ascii::{String, string};

  use numeron::creature_type::CreatureType;

  use numeron::rarity::Rarity;

  use numeron::terrain_type::TerrainType;

  use numeron::battle_result::BattleResult;

  use numeron::weather_type::WeatherType;

  use numeron::position::Position;

  use numeron::creature_stats::CreatureStats;

  use numeron::map_config::MapConfig;

  use numeron::extension_data::ExtensionData;

  use numeron::creature_spawned_event::CreatureSpawnedEvent;

  use numeron::creature_spawned_event;

  public fun creature_spawned_event(creature_id: address, creature_type: CreatureType, position: Position) {
    dubhe::storage_event::emit_set_record<CreatureSpawnedEvent, CreatureSpawnedEvent, CreatureSpawnedEvent>(
				string(b"creature_spawned_event"),
				option::none(),
			  	option::none(),
			  option::some(creature_spawned_event::new(creature_id,creature_type,position))
			  )
  }

  use numeron::map_created_event::MapCreatedEvent;

  use numeron::map_created_event;

  public fun map_created_event(map_id: address, creator: address, config: MapConfig) {
    dubhe::storage_event::emit_set_record<MapCreatedEvent, MapCreatedEvent, MapCreatedEvent>(
				string(b"map_created_event"),
				option::none(),
			  	option::none(),
			  option::some(map_created_event::new(map_id,creator,config))
			  )
  }

  use numeron::extension_registered_event::ExtensionRegisteredEvent;

  use numeron::extension_registered_event;

  public fun extension_registered_event(extension_id: address, creator: address, name: String) {
    dubhe::storage_event::emit_set_record<ExtensionRegisteredEvent, ExtensionRegisteredEvent, ExtensionRegisteredEvent>(
				string(b"extension_registered_event"),
				option::none(),
			  	option::none(),
			  option::some(extension_registered_event::new(extension_id,creator,name))
			  )
  }

  public fun battle_initiated_event(_battle_id: address, _creature1: address, _creature2: address, _map_id: address) {
    // TODO: Implement battle initiated event
  }
}
